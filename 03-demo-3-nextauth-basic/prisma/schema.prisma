// Demo 3 : NextAuth + Supabase
// Schéma minimaliste avec tables NextAuth obligatoires

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// TABLES NEXTAUTH (OBLIGATOIRES)
// ============================================

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?  // Pour l'authentification par credentials
  
  // Champs personnalisés
  role          String    @default("user")  // user | admin
  
  // Relations NextAuth (obligatoires)
  accounts      Account[]
  sessions      Session[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ============================================
// NOTES IMPORTANTES
// ============================================
// 1. Les 4 tables ci-dessus sont OBLIGATOIRES pour NextAuth
// 2. User.id est généré automatiquement (cuid)
// 3. hashedPassword est optionnel (seulement si vous utilisez Credentials)
// 4. Vous pouvez ajouter d'autres champs personnalisés au User
// 5. Les relations accounts et sessions sont obligatoires

